// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// See also:
// https://www.prisma.io/docs/guides/database/using-prisma-with-mongodb
// https://www.prisma.io/docs/concepts/components/prisma-client/composite-types

// TODO: follow https://blog.openreplay.com/authentication-and-db-access-with-next-prisma-and-mongodb/

model Outlet {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  street        String
  houseNumber   Int
  city          String
  zipCode       Int
  category      String
  location      Json @unique
  openingHours  OpeningHour[]
  sunlightHours SunlightHour[]
}

type OpeningHour {
  id       String
  weekday  String
  openAt   String?
  closesAt String?
}

type SunlightHour {
  id                  String
  startDate           String
  endDate             String
  outletSunlightHours OutletSunlightHour[]
}

type OutletSunlightHour {
  id        String
  startTime String
  endTime   String
  sunShine  Int
}

// next auth models

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}
model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}