// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // https://stackoverflow.com/questions/74765804/deploy-nextjs-prisma-to-vercel-from-github-actions
  // https://www.prisma.io/docs/concepts/components/prisma-schema/generators
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// See also:
// https://www.prisma.io/docs/guides/database/using-prisma-with-mongodb
// https://www.prisma.io/docs/concepts/components/prisma-client/composite-types

model Outlet {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  street        String
  houseNumber   Int
  city          String
  zipCode       Int
  category      String
  latitude      Int
  longitude     Int
  openingHours  OpeningHour[]
  sunlightHours SunlightHour[]
  createdAt     String
  updatedAt     String

  @@unique([latitude, longitude])
}

type OpeningHour {
  id              String   @map("_id") @db.ObjectId
  weekday         String
  // store open and closing time as one string to debug, e.g. 10:00 - 18:00
  openingHours    String?
  // store as seconds elapsed since midnight to make it easier to make queries
  openAt          Int?
  closesAt        Int?
  closesAtNextDay Boolean? @default(false)
}

type SunlightHour {
  id                 String               @map("_id") @db.ObjectId
  // store full period as one string to debug, e.g. 01/01 - 07/01
  period             String
  // store begin and end date as day number, e.g. 1 - 7
  start              Int
  end                Int
  createdAt          String
  updatedAt          String
  OutletSunlightHour OutletSunlightHour[]
}

type OutletSunlightHour {
  id       String @map("_id") @db.ObjectId
  // store begin and end time as a full string to debug, e.g. 10:00 - 18:00
  hours    String
  // store begin and end time as seconds elapsed since midnight, e.g. 36000 - 64800
  start    Int
  end      Int
  sunshine Int
}

// next auth models

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
